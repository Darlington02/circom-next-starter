{
  "address": "0xA7057C14403ee2f827057Aa2B3A3F2c104d433eD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[1]",
          "name": "input",
          "type": "uint256[1]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x482bf5d4a08fbe2ee12854ddb55e85a074d9939bb9efaad7fbc80768ce45b973",
  "receipt": {
    "to": null,
    "from": "0x9F7D1801163902A50C168f310691FdC97C346395",
    "contractAddress": "0xA7057C14403ee2f827057Aa2B3A3F2c104d433eD",
    "transactionIndex": 0,
    "gasUsed": "1944697",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x618a4dd2443410fd69dea235138c154641012a945977de8b8c3bdaa79434c614",
    "transactionHash": "0x482bf5d4a08fbe2ee12854ddb55e85a074d9939bb9efaad7fbc80768ce45b973",
    "logs": [],
    "blockNumber": 7939553,
    "cumulativeGasUsed": "1944697",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5ff3bdfaca217982e2e0d81e2b8a196b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"input\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifier.sol\":\"Verifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifier.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\nlibrary Pairing {\\n    struct G1Point {\\n        uint X;\\n        uint Y;\\n    }\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint[2] X;\\n        uint[2] Y;\\n    }\\n    /// @return the generator of G1\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n    /// @return the generator of G2\\n    function P2() internal pure returns (G2Point memory) {\\n        // Original code point\\n        return G2Point(\\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\\n        );\\n\\n/*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n    }\\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n        // The prime q in the base field F_q for G1\\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n        if (p.X == 0 && p.Y == 0)\\n            return G1Point(0, 0);\\n        return G1Point(p.X, q - (p.Y % q));\\n    }\\n    /// @return r the sum of two points of G1\\n    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success,\\\"pairing-add-failed\\\");\\n    }\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {\\n        uint[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require (success,\\\"pairing-mul-failed\\\");\\n    }\\n    /// @return the result of computing the pairing check\\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n    /// return true.\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        require(p1.length == p2.length,\\\"pairing-lengths-failed\\\");\\n        uint elements = p1.length;\\n        uint inputSize = elements * 6;\\n        uint[] memory input = new uint[](inputSize);\\n        for (uint i = 0; i < elements; i++)\\n        {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[0];\\n            input[i * 6 + 3] = p2[i].X[1];\\n            input[i * 6 + 4] = p2[i].Y[0];\\n            input[i * 6 + 5] = p2[i].Y[1];\\n        }\\n        uint[1] memory out;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success,\\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n    /// Convenience method for a pairing check for two pairs.\\n    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for three pairs.\\n    function pairingProd3(\\n            G1Point memory a1, G2Point memory a2,\\n            G1Point memory b1, G2Point memory b2,\\n            G1Point memory c1, G2Point memory c2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](3);\\n        G2Point[] memory p2 = new G2Point[](3);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for four pairs.\\n    function pairingProd4(\\n            G1Point memory a1, G2Point memory a2,\\n            G1Point memory b1, G2Point memory b2,\\n            G1Point memory c1, G2Point memory c2,\\n            G1Point memory d1, G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](4);\\n        G2Point[] memory p2 = new G2Point[](4);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p1[3] = d1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        p2[3] = d2;\\n        return pairing(p1, p2);\\n    }\\n}\\ncontract Verifier {\\n    using Pairing for *;\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[] IC;\\n    }\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n    }\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\\n        );\\n\\n        vk.beta2 = Pairing.G2Point(\\n            [4252822878758300859123897981450591353533073413197771768651442665752259397132,\\n             6375614351688725206403948262868962793625744043794305715222011528459656738731],\\n            [21847035105528745403288232691147584728191162732299865338377159692350059136679,\\n             10505242626370262277552901082094356697409835680220590971873171140371331206856]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [13954653310088514376305754577809178046354645952937429706233757204533741185640,\\n             7236961048520605254482947428888240336343940059632350231164394821870109189447],\\n            [6960859747512078626452452371136419309163786626556130096087065159810154914229,\\n             21580620452266895735809557720478748648688145564490809621210066046809548110406]\\n        );\\n        vk.IC = new Pairing.G1Point[](2);\\n        \\n        vk.IC[0] = Pairing.G1Point( \\n            10794182705291553672826494743002327024435714501909536998659302035393584699961,\\n            7484398469851522388893917011621144456160498713939322236445321568031877439047\\n        );                                      \\n        \\n        vk.IC[1] = Pairing.G1Point( \\n            2494923446058214646639418591712156421366388762181821637289531085843728324281,\\n            5725178132428480568821403146496952551332721127066178100464798546821141271312\\n        );                                      \\n        \\n    }\\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n        VerifyingKey memory vk = verifyingKey();\\n        require(input.length + 1 == vk.IC.length,\\\"verifier-bad-input\\\");\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n        for (uint i = 0; i < input.length; i++) {\\n            require(input[i] < snark_scalar_field,\\\"verifier-gte-snark-scalar-field\\\");\\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\\n        }\\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\\n        if (!Pairing.pairingProd4(\\n            Pairing.negate(proof.A), proof.B,\\n            vk.alfa1, vk.beta2,\\n            vk_x, vk.gamma2,\\n            proof.C, vk.delta2\\n        )) return 1;\\n        return 0;\\n    }\\n    /// @return r  bool true if proof is valid\\n    function verifyProof(\\n            uint[2] memory a,\\n            uint[2][2] memory b,\\n            uint[2] memory c,\\n            uint[1] memory input\\n        ) public view returns (bool r) {\\n        Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n        uint[] memory inputValues = new uint[](input.length);\\n        for(uint i = 0; i < input.length; i++){\\n            inputValues[i] = input[i];\\n        }\\n        if (verify(inputValues, proof) == 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe96c3abe714249df0d5121a8cef2803ac653634a037f3215a8e3c2d09f1aa292\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506122a4806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190611c55565b610060565b6040516100579190611d9b565b60405180910390f35b600061006a611960565b6040518060400160405280876000600281106100af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001876001600281106100f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015181525081600001819052506040518060400160405280604051806040016040528088600060028110610153577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151600060028110610191577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001886000600281106101d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151600160028110610213577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152508152602001604051806040016040528088600160028110610265577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516000600281106102a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001886001600281106102e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151600160028110610325577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151815250815250816020018190525060405180604001604052808560006002811061037d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001856001600281106103c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015181525081604001819052506000600167ffffffffffffffff811115610414577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104425781602001602082028036833780820191505090505b50905060005b60018110156104e75784816001811061048a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518282815181106104c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806104df90612049565b915050610448565b5060006104f48284610514565b14156105055760019250505061050c565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050600061054461079f565b90508060800151516001865161055a9190611f1e565b1461059a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059190611db6565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b86518110156106fb57838782815181106105fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015110610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90611df6565b60405180910390fd5b6106e6826106e1856080015160018561065c9190611f1e565b81518110610693577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518a85815181106106d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610c15565b610d64565b915080806106f390612049565b9150506105b8565b5061074b81836080015160008151811061073e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610d64565b905061078161075d8660000151610eff565b8660200151846000015185602001518587604001518b604001518960600151610fa4565b6107915760019350505050610799565b600093505050505b92915050565b6107a7611993565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f1eda0dcae28965b74c06739505996c6ef11b5514c62e01d925b0364a3c396a6881526020017f0ffff98c55a6fb5fbd19caab4c9c726cafb2ce9cb182f419b2e9d06ce1d9e547815250815260200160405180604001604052807f0f63b4fde53bbf77d2caa2cf3ead4c863f29aa259337a9b133a87bea0ae661b581526020017f2fb632c52c079f60d6f90bee19b6a35464f66b214158de74041a34da60d1ba468152508152508160600181905250600267ffffffffffffffff811115610a94577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610acd57816020015b610aba6119da565b815260200190600190039081610ab25790505b50816080018190525060405180604001604052807f17dd4a78d23468d1141113d082d534e41ec74e151d74162116c29cc102621a3981526020017f108c04f862bc718ad49f90df6d778712bbdb2a8a9e8349d81418f44ac5811e478152508160800151600081518110610b69577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525060405180604001604052807f0584139dea87bfc802b78d16336c5507427cdbd3b485ed93311612dd9dae56b981526020017f0ca856036d046756064d3e3efb84c27f6d3589ab9e8f9363905e5a92386493108152508160800151600181518110610c07577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525090565b610c1d6119da565b610c256119f4565b836000015181600060038110610c64577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050836020015181600160038110610cac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181815250508281600260038110610cf0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050600060608360808460076107d05a03fa90508060008114610d1957610d1b565bfe5b5080610d5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5390611dd6565b60405180910390fd5b505092915050565b610d6c6119da565b610d74611a16565b836000015181600060048110610db3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050836020015181600160048110610dfb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050826000015181600260048110610e43577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050826020015181600360048110610e8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050600060608360c08460066107d05a03fa90508060008114610eb457610eb6565bfe5b5080610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee90611e36565b60405180910390fd5b505092915050565b610f076119da565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610f44575060008360200151145b15610f68576040518060400160405280600081526020016000815250915050610f9f565b604051806040016040528084600001518152602001828560200151610f8d9190612092565b83610f989190611fce565b8152509150505b919050565b600080600467ffffffffffffffff811115610fe8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561102157816020015b61100e6119da565b8152602001906001900390816110065790505b5090506000600467ffffffffffffffff811115611067577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110a057816020015b61108d611a38565b8152602001906001900390816110855790505b5090508a826000815181106110de577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508882600181518110611124577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250868260028151811061116a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525084826003815181106111b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525089816000815181106111f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250878160018151811061123c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508581600281518110611282577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525083816003815181106112c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506112dd82826112ed565b9250505098975050505050505050565b60008151835114611333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132a90611e16565b60405180910390fd5b60008351905060006006826113489190611f74565b905060008167ffffffffffffffff81111561138c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156113ba5781602001602082028036833780820191505090505b50905060005b8381101561189f57868181518110611401577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015182600060068461141d9190611f74565b6114279190611f1e565b8151811061145e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508681815181106114a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518260016006846114bf9190611f74565b6114c99190611f1e565b81518110611500577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050858181518110611545577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015160006002811061158a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600260068461159f9190611f74565b6115a99190611f1e565b815181106115e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050858181518110611625577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015160016002811061166a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600360068461167f9190611f74565b6116899190611f1e565b815181106116c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050858181518110611705577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015160006002811061174a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600460068461175f9190611f74565b6117699190611f1e565b815181106117a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508581815181106117e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015160016002811061182a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600560068461183f9190611f74565b6118499190611f1e565b81518110611880577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061189790612049565b9150506113c0565b506118a8611a5e565b6000602082602086026020860160086107d05a03fa905080600081146118cd576118cf565bfe5b5080611910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190790611e56565b60405180910390fd5b60008260006001811061194c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015114159550505050505092915050565b60405180606001604052806119736119da565b8152602001611980611a38565b815260200161198d6119da565b81525090565b6040518060a001604052806119a66119da565b81526020016119b3611a38565b81526020016119c0611a38565b81526020016119cd611a38565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060400160405280611a4b611a80565b8152602001611a58611a80565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000611ab5611ab084611e9b565b611e76565b90508082856040860282011115611acb57600080fd5b60005b85811015611afb5781611ae18882611c19565b845260208401935060408301925050600181019050611ace565b5050509392505050565b6000611b18611b1384611ec1565b611e76565b90508082856020860282011115611b2e57600080fd5b60005b85811015611b5e5781611b448882611c40565b845260208401935060208301925050600181019050611b31565b5050509392505050565b6000611b7b611b7684611ee7565b611e76565b90508082856020860282011115611b9157600080fd5b60005b85811015611bc15781611ba78882611c40565b845260208401935060208301925050600181019050611b94565b5050509392505050565b600082601f830112611bdc57600080fd5b6002611be9848285611aa2565b91505092915050565b600082601f830112611c0357600080fd5b6001611c10848285611b05565b91505092915050565b600082601f830112611c2a57600080fd5b6002611c37848285611b68565b91505092915050565b600081359050611c4f81612257565b92915050565b6000806000806101208587031215611c6c57600080fd5b6000611c7a87828801611c19565b9450506040611c8b87828801611bcb565b93505060c0611c9c87828801611c19565b925050610100611cae87828801611bf2565b91505092959194509250565b611cc381612002565b82525050565b6000611cd6601283611f0d565b9150611ce182612161565b602082019050919050565b6000611cf9601283611f0d565b9150611d048261218a565b602082019050919050565b6000611d1c601f83611f0d565b9150611d27826121b3565b602082019050919050565b6000611d3f601683611f0d565b9150611d4a826121dc565b602082019050919050565b6000611d62601283611f0d565b9150611d6d82612205565b602082019050919050565b6000611d85601583611f0d565b9150611d908261222e565b602082019050919050565b6000602082019050611db06000830184611cba565b92915050565b60006020820190508181036000830152611dcf81611cc9565b9050919050565b60006020820190508181036000830152611def81611cec565b9050919050565b60006020820190508181036000830152611e0f81611d0f565b9050919050565b60006020820190508181036000830152611e2f81611d32565b9050919050565b60006020820190508181036000830152611e4f81611d55565b9050919050565b60006020820190508181036000830152611e6f81611d78565b9050919050565b6000611e80611e91565b9050611e8c8282612018565b919050565b6000604051905090565b600067ffffffffffffffff821115611eb657611eb5612121565b5b602082029050919050565b600067ffffffffffffffff821115611edc57611edb612121565b5b602082029050919050565b600067ffffffffffffffff821115611f0257611f01612121565b5b602082029050919050565b600082825260208201905092915050565b6000611f298261200e565b9150611f348361200e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f6957611f686120c3565b5b828201905092915050565b6000611f7f8261200e565b9150611f8a8361200e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611fc357611fc26120c3565b5b828202905092915050565b6000611fd98261200e565b9150611fe48361200e565b925082821015611ff757611ff66120c3565b5b828203905092915050565b60008115159050919050565b6000819050919050565b61202182612150565b810181811067ffffffffffffffff821117156120405761203f612121565b5b80604052505050565b60006120548261200e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612087576120866120c3565b5b600182019050919050565b600061209d8261200e565b91506120a88361200e565b9250826120b8576120b76120f2565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6122608161200e565b811461226b57600080fd5b5056fea264697066735822122036a85a34beb8be72935d4f6335b6c72c260d3ec050a4a121870e6a521bcbf4a464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190611c55565b610060565b6040516100579190611d9b565b60405180910390f35b600061006a611960565b6040518060400160405280876000600281106100af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001876001600281106100f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015181525081600001819052506040518060400160405280604051806040016040528088600060028110610153577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151600060028110610191577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001886000600281106101d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151600160028110610213577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152508152602001604051806040016040528088600160028110610265577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516000600281106102a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001886001600281106102e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151600160028110610325577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151815250815250816020018190525060405180604001604052808560006002811061037d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001856001600281106103c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015181525081604001819052506000600167ffffffffffffffff811115610414577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104425781602001602082028036833780820191505090505b50905060005b60018110156104e75784816001811061048a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518282815181106104c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806104df90612049565b915050610448565b5060006104f48284610514565b14156105055760019250505061050c565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050600061054461079f565b90508060800151516001865161055a9190611f1e565b1461059a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059190611db6565b60405180910390fd5b60006040518060400160405280600081526020016000815250905060005b86518110156106fb57838782815181106105fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015110610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90611df6565b60405180910390fd5b6106e6826106e1856080015160018561065c9190611f1e565b81518110610693577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518a85815181106106d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610c15565b610d64565b915080806106f390612049565b9150506105b8565b5061074b81836080015160008151811061073e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610d64565b905061078161075d8660000151610eff565b8660200151846000015185602001518587604001518b604001518960600151610fa4565b6107915760019350505050610799565b600093505050505b92915050565b6107a7611993565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f1eda0dcae28965b74c06739505996c6ef11b5514c62e01d925b0364a3c396a6881526020017f0ffff98c55a6fb5fbd19caab4c9c726cafb2ce9cb182f419b2e9d06ce1d9e547815250815260200160405180604001604052807f0f63b4fde53bbf77d2caa2cf3ead4c863f29aa259337a9b133a87bea0ae661b581526020017f2fb632c52c079f60d6f90bee19b6a35464f66b214158de74041a34da60d1ba468152508152508160600181905250600267ffffffffffffffff811115610a94577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610acd57816020015b610aba6119da565b815260200190600190039081610ab25790505b50816080018190525060405180604001604052807f17dd4a78d23468d1141113d082d534e41ec74e151d74162116c29cc102621a3981526020017f108c04f862bc718ad49f90df6d778712bbdb2a8a9e8349d81418f44ac5811e478152508160800151600081518110610b69577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525060405180604001604052807f0584139dea87bfc802b78d16336c5507427cdbd3b485ed93311612dd9dae56b981526020017f0ca856036d046756064d3e3efb84c27f6d3589ab9e8f9363905e5a92386493108152508160800151600181518110610c07577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525090565b610c1d6119da565b610c256119f4565b836000015181600060038110610c64577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050836020015181600160038110610cac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181815250508281600260038110610cf0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050600060608360808460076107d05a03fa90508060008114610d1957610d1b565bfe5b5080610d5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5390611dd6565b60405180910390fd5b505092915050565b610d6c6119da565b610d74611a16565b836000015181600060048110610db3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050836020015181600160048110610dfb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050826000015181600260048110610e43577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050826020015181600360048110610e8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050600060608360c08460066107d05a03fa90508060008114610eb457610eb6565bfe5b5080610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee90611e36565b60405180910390fd5b505092915050565b610f076119da565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610f44575060008360200151145b15610f68576040518060400160405280600081526020016000815250915050610f9f565b604051806040016040528084600001518152602001828560200151610f8d9190612092565b83610f989190611fce565b8152509150505b919050565b600080600467ffffffffffffffff811115610fe8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561102157816020015b61100e6119da565b8152602001906001900390816110065790505b5090506000600467ffffffffffffffff811115611067577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110a057816020015b61108d611a38565b8152602001906001900390816110855790505b5090508a826000815181106110de577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508882600181518110611124577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250868260028151811061116a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525084826003815181106111b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525089816000815181106111f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250878160018151811061123c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508581600281518110611282577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525083816003815181106112c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506112dd82826112ed565b9250505098975050505050505050565b60008151835114611333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132a90611e16565b60405180910390fd5b60008351905060006006826113489190611f74565b905060008167ffffffffffffffff81111561138c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156113ba5781602001602082028036833780820191505090505b50905060005b8381101561189f57868181518110611401577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015182600060068461141d9190611f74565b6114279190611f1e565b8151811061145e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508681815181106114a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518260016006846114bf9190611f74565b6114c99190611f1e565b81518110611500577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050858181518110611545577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015160006002811061158a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600260068461159f9190611f74565b6115a99190611f1e565b815181106115e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050858181518110611625577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015160016002811061166a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600360068461167f9190611f74565b6116899190611f1e565b815181106116c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050858181518110611705577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015160006002811061174a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600460068461175f9190611f74565b6117699190611f1e565b815181106117a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508581815181106117e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015160016002811061182a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600560068461183f9190611f74565b6118499190611f1e565b81518110611880577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061189790612049565b9150506113c0565b506118a8611a5e565b6000602082602086026020860160086107d05a03fa905080600081146118cd576118cf565bfe5b5080611910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190790611e56565b60405180910390fd5b60008260006001811061194c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015114159550505050505092915050565b60405180606001604052806119736119da565b8152602001611980611a38565b815260200161198d6119da565b81525090565b6040518060a001604052806119a66119da565b81526020016119b3611a38565b81526020016119c0611a38565b81526020016119cd611a38565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060400160405280611a4b611a80565b8152602001611a58611a80565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000611ab5611ab084611e9b565b611e76565b90508082856040860282011115611acb57600080fd5b60005b85811015611afb5781611ae18882611c19565b845260208401935060408301925050600181019050611ace565b5050509392505050565b6000611b18611b1384611ec1565b611e76565b90508082856020860282011115611b2e57600080fd5b60005b85811015611b5e5781611b448882611c40565b845260208401935060208301925050600181019050611b31565b5050509392505050565b6000611b7b611b7684611ee7565b611e76565b90508082856020860282011115611b9157600080fd5b60005b85811015611bc15781611ba78882611c40565b845260208401935060208301925050600181019050611b94565b5050509392505050565b600082601f830112611bdc57600080fd5b6002611be9848285611aa2565b91505092915050565b600082601f830112611c0357600080fd5b6001611c10848285611b05565b91505092915050565b600082601f830112611c2a57600080fd5b6002611c37848285611b68565b91505092915050565b600081359050611c4f81612257565b92915050565b6000806000806101208587031215611c6c57600080fd5b6000611c7a87828801611c19565b9450506040611c8b87828801611bcb565b93505060c0611c9c87828801611c19565b925050610100611cae87828801611bf2565b91505092959194509250565b611cc381612002565b82525050565b6000611cd6601283611f0d565b9150611ce182612161565b602082019050919050565b6000611cf9601283611f0d565b9150611d048261218a565b602082019050919050565b6000611d1c601f83611f0d565b9150611d27826121b3565b602082019050919050565b6000611d3f601683611f0d565b9150611d4a826121dc565b602082019050919050565b6000611d62601283611f0d565b9150611d6d82612205565b602082019050919050565b6000611d85601583611f0d565b9150611d908261222e565b602082019050919050565b6000602082019050611db06000830184611cba565b92915050565b60006020820190508181036000830152611dcf81611cc9565b9050919050565b60006020820190508181036000830152611def81611cec565b9050919050565b60006020820190508181036000830152611e0f81611d0f565b9050919050565b60006020820190508181036000830152611e2f81611d32565b9050919050565b60006020820190508181036000830152611e4f81611d55565b9050919050565b60006020820190508181036000830152611e6f81611d78565b9050919050565b6000611e80611e91565b9050611e8c8282612018565b919050565b6000604051905090565b600067ffffffffffffffff821115611eb657611eb5612121565b5b602082029050919050565b600067ffffffffffffffff821115611edc57611edb612121565b5b602082029050919050565b600067ffffffffffffffff821115611f0257611f01612121565b5b602082029050919050565b600082825260208201905092915050565b6000611f298261200e565b9150611f348361200e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f6957611f686120c3565b5b828201905092915050565b6000611f7f8261200e565b9150611f8a8361200e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611fc357611fc26120c3565b5b828202905092915050565b6000611fd98261200e565b9150611fe48361200e565b925082821015611ff757611ff66120c3565b5b828203905092915050565b60008115159050919050565b6000819050919050565b61202182612150565b810181811067ffffffffffffffff821117156120405761203f612121565b5b80604052505050565b60006120548261200e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612087576120866120c3565b5b600182019050919050565b600061209d8261200e565b91506120a88361200e565b9250826120b8576120b76120f2565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f76657269666965722d6261642d696e7075740000000000000000000000000000600082015250565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b7f70616972696e672d6c656e677468732d6661696c656400000000000000000000600082015250565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6122608161200e565b811461226b57600080fd5b5056fea264697066735822122036a85a34beb8be72935d4f6335b6c72c260d3ec050a4a121870e6a521bcbf4a464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}